#! /bin/bash
#
# Build Oracle client packages:
#    * instant client
#    * runtime client
#    * admin   client
#
# Use:
#
#    make-oracle-client-package <path_to_oracle_archive
#
#

source /lib/lsb/orabase-functions 2>&- || { echo "File @liblsb@/orabase-functions is not exists" >&2 ; exit 1; }

# Operational variables ----------------------------------------------------------------
BASE_DIR=`dirname $0`
EXE_NAME=`basename $0`
#
BUILD_DIR=
EMAIL=
KEEP_DIR=no
ADD_REV=1
MAINT=
FAKEROOT=fakeroot
UPVER=
ARCHIVE=
ORA_VER=
ORA_NAME=
ORA_HOME="/opt/oracle/product/client"
ORA_ETC="/etc/oracle"
ORA_INV_LOC="$ORA_ETC/oraInventory"
ORA_PTR_LOC="$ORA_ETC/oraInventory.loc"
ORA_RSP_FILE="response.rsp"
ORA_HOME_LEVEL=-1
# Commands
SUDO=sudo

# Global variables ---------------------------------------------------------------------
#
VERSION="0.1"
ORACLE_USER=oracle
ORACLE_GROUP=oinstall


# Procedures and functions -------------------------------------------------------------
usage() {
  cat << __EOFF__

Build Debain package for Oracle RDBMS client software.

Use:  $0 [options] archive_file

   -b|--build-dir <dir>            -- base directory to build package (autogenerated)
   -e|--email <email>              -- local maintainer email (use DEBEMAIL or auto-generate)
   -k|--keep-dir                   -- keep the build directory ($KEEP_DIR)
   -l|--revision <number>          -- local revision to append to package version ($ADD_REV)
   -m|--maintainer <name>          -- local maintainer name (use DEBFULLNAME or leave empty)
   -r|--root-command <command>     -- command to gain root privilege for package build ($FAKEROOT)
   -u|--upstream-version <version> -- force the upstream version (autodetected)
   -o|--oracle-home-dir            -- ORACLE_HOME directory to install software ($ORA_HOME)
   -h|--help                       -- display this help screen
   -v|--version                    -- show the program version ($VERSION)

   archive_file                    -- Oracle client software distribution file

__EOFF__
}

#
# Setup the build directory
#
func_workdir() {
    orabase_info "Creating build directory ..."

	if [ -z "$BUILD_DIR" ] ; then
        BUILD_DIR="$(mktemp -d)" || orabase_error_exit "Unable to create the work directory, aborting..."
	else
		if ! [ -d "$BUILD_DIR" ] ; then
			[ -e "$BUILD_DIR" ] && orabase_error_exit "Directory $BUILD_DIR already exists and isn't a directory, aborting..."
			mkdir -p "$BUILD_DIR" || orabase_error_exit "Can't create BUILD_DIR $BUILD_DIR"
		else
			DIRTEST="$(ls "$BUILD_DIR")"

			if [ ${#DIRTEST} -ne 0 ] ; then
                orabase_error_exit "Directory $BUILD_DIR is not empty, aborting..."
			fi
		fi
	fi
    
	if [ $KEEP_DIR != "yes" ] ; then
		trap "rm -rf $BUILD_DIR; [ -d ${ORA_HOME}.backup ] && rm -rf $ORA_HOME && mv ${ORA_HOME}.backup $ORA_HOME" EXIT HUP INT TRAP TERM
	fi

    orabase_info "Directory $BUILD_DIR created"
}

#
# Set up real ORACLE_HOME directory
#
func_orahome_make() {
    local i=0 oh loh

    orabase_info "Creating real ORACLE_HOME directiory as $ORA_HOME ..."
    
    [ -d ${ORA_HOME}.backup ] && orabase_error_exit "Already has backup directory ${ORA_HOME}.backup, terminating ..."

    if [ -d "$ORA_HOME" ] ; then
        orabase_warn "Make backup copy of existing ORACLE_HOME directory ..."
        ORA_HOME_LEVEL=0
        mv $ORA_HOME ${ORA_HOME}.backup || orabase_error_exit "Can't create backup of ORACLE_HOME directory, terminating ..."
    else
        i=2
        oh=`echo $ORA_HOME | cut -d '/' -f 1-$i`
        loh=
        while [ "$oh" != "$loh" ] ; do
          [ -d $oh ] && i=$((i+1))
          loh=$oh
          oh=`echo $ORA_HOME | cut -d '/' -f 1-$i`
        done
    fi
    ORA_HOME_LEVEL=$((i - 1))

    mkdir -p $ORA_HOME || orabase_error_exit "Can't create ORACLE_HOME directory $ORA_HOME, terminating ..."
    chown $ORACLE_USER:$ORACLE_GROUP $ORA_HOME
}

#
# Clean real ORACLE_HOME
#
func_orahome_clean() {
    local i oh= loh=
    
    if [ -d "${ORA_HOME}.backup" ] ; then
        orabase_warn "Restore backup copy of existing ORACLE_HOME directory ..."
        rm -rf $ORA_HOME && mv ${ORA_HOME}.backup $ORA_HOME || orabase_error "Error while restoring ORACLE_HOME directory. Please, clean up it manually."
    elif [ $ORA_HOME_LEVEL -gt 0 ] ; then
        i=$((ORA_HOME_LEVEL + 1))
        oh=`echo $ORA_HOME | cut -d '/' -f $i-$i`
        loh=`echo $ORA_HOME | cut -d '/' -f 1-$ORA_HOME_LEVEL`
        orabase_info "Remove created ORACLE_HOME ..."
        {
            cd $loh
            rm -rf $oh || orabase_error "Can't remove created ORACLE_HOME directory. Please clean up it manually."
        }
    fi
}

#
# Prepare distribution for installation
#
func_extract() {
    orabase_info "Extract source file $ARCHIVE to build directory ..."

    if [[ "$ARCHIVE" =~ .*\.cpio\.gz ]] ; then
        gunzip --to-stdout  "$ARCHIVE" | cpio --extract --make-directories || orabase_error_exit "Error while extract sources, terminating ..."
    fi

    orabase_info "Archive extracted"

}

#
# Get client version
#
func_getversion() {
    orabase_info "Getting Oracle client version ..."

    pfile=`find $BUILD_DIR -type f -name 'products.xml' -print0 | xargs -0 echo`
    [ -z "$pfile" ] && orabase_error_exit "Can't find product.xml, terminating..."

    ORA_VER=`sed -ne 's/<COMP NAME="oracle.client" VER="\([^"]\+\)".*/\1/p' $pfile`

    [ -z "$ORA_VER" ] && orabase_error_exit "Can't get client version, terminating..."

    orabase_info "Found Oracle client version $ORA_VER"

    ORA_HOME=$ORA_HOME/$ORA_VER

    orabase_info "Set ORACLE_HOME path to $ORA_HOME"
}

#
# Prepare installer response files
#
func_makeresp() {
    if [[ "$ORA_VER" =~ 10.* ]] ; then
        rm -f $BUILD_DIR/*.rsp
        for rsp in instantClient.rsp clientruntime.rsp clientadmin.rsp ; do
            orabase_info "Create response file for $rsp ..."
            rfile=`find $BUILD_DIR -type f -name "$rsp" -print0 | xargs -0 echo`
            if [ -z "$rfile" ] ; then
                orabase_warn "Can't find response file $rsp, skiping..."
                continue
            fi
            rsp=`echo $rsp | cut -d '.' -f 1`

            sed -e "s#^UNIX_GROUP_NAME=.*#UNIX_GROUP_NAME=oinstall#" \
                -e "s#^ORACLE_HOME=.*#ORACLE_HOME=$ORA_HOME#" \
                -e "s#^ORACLE_HOME_NAME=.*#ORACLE_HOME_NAME=Ora10g_$rsp#" $rfile > "$BUILD_DIR/$rsp.rsp"
        done
    fi
}

#
# Create inventory location
#
func_inventory() {
    orabase_info "Creating inventory location ..."
    
    mkdir -p "$BUILD_DIR/$ORA_INV_LOC"


    cat >  $BUILD_DIR/$ORA_PTR_LOC << _EOF_
inst_group=oinstall
inventory_loc=${BUILD_DIR}${ORA_INV_LOC}
_EOF_

}

#
# Install Oracle client software
#
func_install() {
    local dst tgt

    # Set permision for Oracle Installer
    #chmod a+rwx -R $BUILD_DIR

    rI=`find $BUILD_DIR -type f -name "runInstaller" -print0 | xargs -0 echo`
    [ -z "$rI" ] && orabase_error_exit "Can't find runInstaller execution file, terminating..."

    for f in `ls -1 "$BUILD_DIR"/*.rsp` ; do
        orabase_info "Installing Oracle client for $f ..."
        $rI -silent -nobackground -waitforcompletion -ignoreSysPrereqs -invPtrLoc "$BUILD_DIR/$ORA_PTR_LOC" -responseFile "$f"
        rc=$?
        if [ $rc -ne 0 ] ; then
            orabase_error "Error installing Oracle instant client software"
            continue
        fi
        
        # There is a bug with sqlpus linking
        sed --in-place '/^LINKLDLIBS=/i EXPDLIBS=-lclntsh' $ORA_HOME/sqlplus/lib/env_sqlplus.mk
        ORACLE_HOME=$ORA_HOME $ORA_HOME/bin/relink utilities
        
        # Set permision to build Debian package
        #$SUDO chmod a+rwx -R $BUILD_DIR

        case "$f" in
            *instantClient.rsp) tgt="$BUILD_DIR"/oracle-client-instant; dst="$tgt"/debian/oracle-client-instant/$ORA_HOME ;;
            *clientruntime.rsp) tgt="$BUILD_DIR"/oracle-client-runtime; dst="$tgt"/debian/oracle-client-runtime/$ORA_HOME ;;
            *clientadmin.rsp) tgt="$BUILD_DIR"/oracle-client-admin; dst="$tgt"/debian/oracle-client-admin/$ORA_HOME ;;
            *) orabase_error_exit "Not supported package for this client installation: $f" ;;
        esac

        # Move installed software to target directory to build Debian package
        rm -rf "$dst"
        mkdir -p  "`dirname "$dst"`"
        mv "$ORA_HOME" "`dirname "$dst"`"
        
        # Copy response file
        cp "$f" "$tgt"/$ORA_RSP_FILE

        # Remove created oraInst locators
        rm -rf "$BUILD_DIR/$ORA_INV_LOC" "$dst"/oraInst.loc
    done
}

#
# Create Debian files to build package
#
func_debianize() {
    local ld_name conflicts

    for d in oracle-client-instant/debian/oracle-client-instant oracle-client-runtime/debian/oracle-client-runtime oracle-client-admin/debian/oracle-client-admin ; do
        DST_DIR="$BUILD_DIR"/$d
        [ ! -d "$DST_DIR" ] && continue

        DEBIAN_WORKDIR="`echo $DST_DIR | sed -e 's#\(.*\)/\([^/]\+\)$#\1#'`"

        case $d in
            *-instant ) ld_name=instant; conflicts="oracle-client-runtime, oracle-client-admin" ;;
            *-runtime ) ld_name=runtime; conflicts="oracle-client-instant, oracle-client-admin" ;;
            *-admin   ) ld_name=admin; conflicts="oracle-client-runtime, oracle-client-instant" ;;
        esac

        ORA_NAME=`sed -n -e 's/^ORACLE_HOME_NAME=\(.*\)/\1/p' "$DEBIAN_WORKDIR"/../$ORA_RSP_FILE`

        # Create conffiles
        cat << __EOFF__ > "$DEBIAN_WORKDIR"/conffiles
etc/ld.so.conf.d/oracle_client_$ld_name_$ORA_VER.conf
__EOFF__
        # Create ld.so.conf
        mkdir -p "$DST_DIR"/etc/ld.so.conf.d
        if [ "$ld_name" == "instant" ] ; then
            echo $ORA_HOME > "$DST_DIR"/etc/ld.so.conf.d/oracle_client_$ld_name_$ORA_VER.conf
        else
            echo $ORA_HOME/lib > "$DST_DIR"/etc/ld.so.conf.d/oracle_client_$ld_name_$ORA_VER.conf
            echo $ORA_HOME/lib32 >> "$DST_DIR"/etc/ld.so.conf.d/oracle_client_$ld_name_$ORA_VER.conf
        fi

        # Create Inventory location file
        cat << __EOFF__ >  "$DST_DIR/$ORA_HOME"/oraInst.loc
inst_group=oinstall
inventory_loc=$ORA_INV_LOC
__EOFF__

        # Create dirs
        mkdir -p "$DST_DIR/var/log/oracle/oraInventory"
        cat << __EOFF__ > "$DEBIAN_WORKDIR"/dirs
`echo $ORA_INV_LOC | sed -e 's#^/##'`
var/log/oracle
var/log/oracle/oraInventory
__EOFF__

        # Create doc
        cat << __EOFF__ > "$DEBIAN_WORKDIR"/docs
$ORA_RSP_FILE
__EOFF__

        # Create helper scripts
        cat << __EOFF__ > "$DEBIAN_WORKDIR"/preinst
#!/bin/sh
#   preinst script for oracle-client-$ld_name
#
# see: dh_installdeb(1)

set -e

export ORACLE_HOME=$ORA_HOME

# summary of how this script can be called:
#        * <new-preinst> \`install'
#        * <new-preinst> \`install' <old-version>
#        * <new-preinst> \`upgrade' <old-version>
#        * <old-preinst> \`abort-upgrade' <new-version>
#
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

case "\$1" in
    install)
    ;;
    upgrade)
    ;;
    abort-upgrade|abort-remove|abort-deconfigure)
    ;;
    *)
        echo "preinst called with unknown arguments \\\`\$@'" >&2
        exit 1
    ;;
esac

exit 0        
__EOFF__

        cat << __EOFF__ > "$DEBIAN_WORKDIR"/postinst
#!/bin/sh
#   postinst script for oracle-client-$ld_name
#
# see: dh_installdeb(1)

set -e

export ORACLE_HOME=$ORA_HOME

# summary of how this script can be called:
#        * <postinst> \`configure' <most-recently-configured-version>
#        * <old-postinst> \`abort-upgrade' <new version>
#        * <conflictor's-postinst> \`abort-remove' \`in-favour' <package>
#          <new-version>
#        * <postinst> \`abort-remove'
#        * <deconfigured's-postinst> \`abort-deconfigure' \`in-favour'
#          <failed-install-package> <version> \`removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package
action=\$1
version=\$2
    
[ "\$action" = "configure" -a -n "\$version" ] && action="upgrade"
    
case "\$action" in
    configure)
	   /sbin/ldconfig

       # Create central inventory location
	   if [ ! -d $ORA_INV_LOC ] ; then
	       mkdir -p $ORA_INV_LOC
	       chown -R $ORACLE_USER:$ORACLE_GROUP $ORA_INV_LOC
	       chmod 770 $ORA_INV_LOC
	   fi

	   if [ ! -f $ORA_PTR_LOC ] ; then
	       echo "inst_group=$ORACLE_GROUP" > $ORA_PTR_LOC
	       echo "inventory_loc=$ORA_INV_LOC" >> $ORA_PTR_LOC
	       chown $ORACLE_USER:$ORACLE_GROUP $ORA_INV_LOC
	       chmod -R 660 $ORA_PTR_LOC
	   fi
	   [ ! -h /etc/oraInst.loc ] && ln -s $ORA_PTR_LOC /etc/oraInst.loc

	   # Create oratab entry
	   if ! grep -q -s \$ORACLE_HOME /etc/oratab 2>/dev/null ; then
           echo "# Entry for Oracle $ld_name client software" >> /etc/oratab
	       echo "# *:\$ORACLE_HOME:N" >> /etc/oratab
	   fi
	   chown $ORACLE_USER:$ORACLE_GROUP /etc/oratab
	   chmod 664 /etc/oratab

        # Add ORACLE_HOME to Central Inventory
        if [ -x \$ORACLE_HOME/oui/bin/runInstaller.sh ] ; then
	        $SUDO -u $ORACLE_USER \$ORACLE_HOME/oui/bin/runInstaller.sh -silent -attachHome ORACLE_HOME="\$ORACLE_HOME" ORACLE_HOME_NAME="$ORA_NAME" "CLUSTER_NODES={}"
            chown -R $ORACLE_USER:$ORACLE_GROUP $ORA_INV_LOC
            chmod -R 770 $ORA_INV_LOC
        fi

	    # Move OUI logs to log directory
        if [ ! -h $ORA_INV_LOC/logs ] ; then
	       mv $ORA_INV_LOC/logs/* /var/log/oracle/oraInventory 2>/dev/null || true
	       rm -rf $ORA_INV_LOC/logs || true
	       ln -s /var/log/oracle/oraInventory $ORA_INV_LOC/logs
        fi
    ;;
    upgrade)
	   /sbin/ldconfig
    ;;
    abort-upgrade|abort-remove|abort-deconfigure)
    ;;
    *)
        echo "postinst called with unknown arguments \\\`\$@'" >&2
        exit 1
    ;;
esac

exit 0
__EOFF__

        cat << __EOFF__ > "$DEBIAN_WORKDIR"/prerm
#!/bin/sh
#   prerm script for oracle-client-$ld_name
#
# see: dh_installdeb(1)

set -e

export ORACLE_HOME=$ORA_HOME

# summary of how this script can be called:
#        * <prerm> \`remove'
#        * <old-prerm> \`upgrade' <new-version>
#        * <new-prerm> \`failed-upgrade' <old-version>
#        * <conflictor's-prerm> \`remove' \`in-favour' <package> <new-version>
#        * <deconfigured's-prerm> \`deconfigure' \`in-favour'
#          <package-being-installed> <version> \`removing'
#          <conflicting-package> <version>
# for details, see /usr/doc/packaging-manual/

case "\$1" in
    upgrade|failed-upgrade|abort-install|abort-upgrade|disappear)
    ;;
    remove|purge)
	    # Remove ORACLE_HOME from Central Inventory
        if [ -x \$ORACLE_HOME/oui/bin/runInstaller.sh ] ; then
	        $SUDO -u $ORACLE_USER \$ORACLE_HOME/oui/bin/runInstaller.sh -silent -detachHome ORACLE_HOME="\$ORACLE_HOME" ORACLE_HOME_NAME="$ORA_NAME"
        fi
    ;;
    *)
        echo "postrm called with unknown arguments \\\`\$@'" >&2
        exit 1
    ;;
esac

exit 0
__EOFF__

        cat << __EOFF__ > "$DEBIAN_WORKDIR"/postrm
#!/bin/sh
#   postrm script for oracle-se
#
# see: dh_installdeb(1)

set -e

export ORACLE_HOME=$ORA_HOME

# summary of how this script can be called:
#        * <postrm> \`remove'
#        * <postrm> \`purge'
#        * <old-postrm> \`upgrade' <new-version>
#        * <new-postrm> \`failed-upgrade' <old-version>
#        * <new-postrm> \`abort-install'
#        * <new-postrm> \`abort-install' <old-version>
#        * <new-postrm> \`abort-upgrade' <old-version>
#        * <disappearer's-postrm> \`disappear' <overwriter>
#          <overwriter-version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

case "\$1" in
    upgrade|failed-upgrade|abort-install|abort-upgrade|disappear)
    ;;
    remove|purge)
        [ -h /etc/oraInst.loc ] && rm -v /etc/oraInst.loc
        [ -f $ORA_PTR_LOC ] && rm -v $ORA_PTR_LOC
        rm -rf /var/log/oracle/oraInventory || true
        rm -f \$ORACLE_HOME/cfgtoollogs/oui/*.err \$ORACLE_HOME/cfgtoollogs/oui/*.log \$ORACLE_HOME/cfgtoollogs/oui/*.out || true
        rm -rfv $ORA_INV_LOC/* || true
	    /sbin/ldconfig
    ;;
    *)
        echo "postrm called with unknown arguments \\\`\$@'" >&2
        exit 1
    ;;
esac

exit 0
__EOFF__

	    cat << __EOFF__ > "$DEBIAN_WORKDIR"/changelog
oracle-client-$ld_name ($ORA_VER+$VERSION-$ADD_REV) unstable; urgency=low

  * Built with $EXE_NAME $VERSION

 -- ${DEBFULLNAME} <${DEBEMAIL}>  $(date -R)

__EOFF__

	    cat << __EOFF__ > "$DEBIAN_WORKDIR"/control
Source: oracle-client-$ld_name
Section: non-free/misc
Priority: extra
Maintainer: ${DEBFULLNAME} <${DEBEMAIL}>
Build-Depends: debhelper (>= 7)
Standards-Version: 3.8.1
Homepage: http://www.oracle.com

Package: oracle-client-$ld_name
Architecture: `[ $(uname -i) == x86_64 ] && echo amd64 || uname -i`
Depends: sudo, oracle-base
Provides: oracle-client
Conflicts: oracle-server, oracle-xe, oracle-xe-universal, $conflicts
Description: Oracle $ld_name client software.
 Converted to deb format after running runInstaller procedure
 .
__EOFF__

        echo "7" > "$DEBIAN_WORKDIR"/compat

        cat << __EOFF__ > "$DEBIAN_WORKDIR"/copyright
This package was debianized by ${DEBFULLNAME} <${DEBEMAIL}> on
$(date -R).

This package is not part of the Debian GNU/Linux distribution. It falls into
category 2.2.3 of the Debian Policy Manual ("... not compliant with the DFSG or
are encumbered by patents or other legal issues that make their distribution
problematic.").

Copyright:

    Copyright © 2009-2012 Oracle USA, Inc.

License:
    
    See apropriate oracle-client-doc package.
__EOFF__

	    cat << __EOFF__ > "$DEBIAN_WORKDIR"/rules
#!/usr/bin/make -f

# verbose mode
#export DH_VERBOSE=1
ORACLE_HOME=$DST_DIR/$ORA_HOME

clean:
	dh_clean 

install:
	dh_installdirs
	dh_installdocs

binary-indep: install
	dh_compress
	dh_fixperms --exclude opt --exclude etc/oracle --exclude var/log/oracle
	dh_installdeb
	dh_gencontrol
	dh_md5sums
	dh_builddeb

binary-arch: build install

binary: binary-indep binary-arch

.PHONY: binary binary-arch binary-indep build clean install
__EOFF__

	    chmod +x "$DEBIAN_WORKDIR"/rules

    done
}

#
# Clean up ORACLE_HOME after build by Oracle Installer
#
func_clean_oracle_home() {
    local ora_home="$1"

    [ -d "$ora_home" ] || return 1

    #
    rm -fv $ora_home/root.sh.old*
    #
    find $ora_home/bin -type f '(' -name '*O' -o -name '*0' -o -name '*bak' -o -size 0 ')' -exec rm -fv {} ';'
    rm -f $ora_home/bin/extjobo
    find $ora_home/ctx/bin -type f '(' -name '*O' -o -name '*0' -o -name '*bak' ')' -exec rm -fv {} ';'
    find $ora_home/install -type f '(' -name '*.log' -o -name '*bak' ')' -exec rm -fv {} ';'
    #
    find  $ora_home/cfgtoollogs -type f -name '*bak*' -exec rm -fv {} ';'
    # 
    find $ora_home/lib -type f  -size 0 -exec rm -fv {} ';'
    find $ora_home/lib -type f  '(' -name '*.tmp' -o -name '*so0' -o -name '*O' ')' -exec rm -fv {} ';'
    find $ora_home/lib32 -type f  -size 0 -exec rm -fv {} ';'
    find $ora_home/lib32 -type f  '(' -name '*.tmp' -o -name '*so0' -o -name '*O' ')' -exec rm -fv {} ';'
    #
    find $ora_home/srvm/admin -type f  -name '*0' -exec rm -fv {} ';'
    #
    find $ora_home/opmn/conf -type f '(' -name '*tmp' -o -name '*backup*' ')' -exec rm -fv {} ';'
    #
    rm -rf $ora_home/ccr/hosts/*
    #
    # - /sbin/ldconfig: if libexpat.so.0 is not a symbolic link
    if [ ! -h $ora_home/lib/libexpat.so.0 ] ; then
        rm -f $ora_home/lib/libexpat.so.0
        rm -f $ora_home/lib/libexpat.so
        if [ -f $ora_home/lib/libexpat.so.0.5.0 ] ; then
            ln -s ./libexpat.so.0.5.0 $ora_home/lib/libexpat.so.0
            ln -s ./libexpat.so.0 $ora_home/lib/libexpat.so
        fi
    fi
    # - make absolute path as relative path
    local lib=$(ls -l $ora_home/lib/libclntsh.so 2>&- | sed -e 's/.*> \(.\+\)/\1/')
    [[ $lib =~ $ORA_HOME ]] && ln -sf ./`basename $lib` $ora_home/lib/libclntsh.so

    return 0
}

#
# Set permisions for files and directories (need root privileges) in ORACLE_HOME
#
_set_exec_for_scripts() {
    local dir=$1
    local perm=${2:-755}

    find $dir -type f | while read line ; do
        file $line 2>&- | grep -q -s 'script text executable' && $SUDO chmod $perm $line || true
    done
}
#
func_set_permissions() {
    local ora_home="$1"

    [ -d "$ora_home" ] || return 1

    # Set defaults except bin/
    find $ora_home -type d -exec chown $ORACLE_USER:$ORACLE_GROUP {} ';' -exec chmod 755 {} ';'
    find $ora_home -type f -not -iwholename "$ora_home/bin/*" -exec chown $ORACLE_USER:$ORACLE_GROUP {} ';' -exec chmod 644 {} ';'

    # oraInventory
    find $ora_home/inventory -type d -exec chown $ORACLE_USER:$ORACLE_GROUP {} ';' -exec chmod 750 {} ';'
    find $ora_home/inventory -type f -exec chown $ORACLE_USER:$ORACLE_GROUP {} ';' -exec chmod 640 {} ';'
    chmod 640  $ora_home/oraInst.loc

    # Perl
    find $ora_home/perl -type d -exec chown $ORACLE_USER:$ORACLE_GROUP {} ';' -exec chmod 750 {} ';'
    find $ora_home/perl -type f -exec chown $ORACLE_USER:$ORACLE_GROUP {} ';' -exec chmod 640 {} ';'
    find $ora_home/perl -type f -iwholename '*/bin/*' -exec chmod 750 {} ';'

    # Set executions for subdirs
    # - root.sh
    chmod 750  $ora_home/root*.sh
    # -ccr
    _set_exec_for_scripts $ora_home/ccr/bin
    chmod 755  $ora_home/ccr/bin/nmz*
    _set_exec_for_scripts $ora_home/ccr/admin/scripts
    chmod 755 $ora_home/ccr/engines/Linux/perl/bin/*
    _set_exec_for_scripts $ora_home/ccr/lib
    _set_exec_for_scripts $ora_home/ccr/sysman/admin/scripts
    # - clone
    _set_exec_for_scripts $ora_home/clone/bin
    # - crs
    _set_exec_for_scripts $ora_home/crs/public
    # - css
    _set_exec_for_scripts $ora_home/css/admin/
    # - ctx
    chmod 755 $ora_home/ctx/bin/*
    # -install 
    _set_exec_for_scripts $ora_home/install
    # -jdbc
    _set_exec_for_scripts $ora_home/jdbc
    # -jdk
    chmod 755 $ora_home/jdk/bin/*
    chmod 755 $ora_home/jdk/jre/bin/*
    # -jre
    chmod 755 $ora_home/jre/1.4.2/bin/*
    # - network
    chmod 700 $ora_home/network/install/sqlnet/setowner.sh
    # - oc4j
    chmod 755 $ora_home/oc4j/bin/*
    # - odbc
    chmod 755 $ora_home/odbc/utl/*
    # - opnm
    chmod 755 $ora_home/opmn/bin/*
    # - oui
    chmod 755 $ora_home/oui/bin/*
    # - sysman
    _set_exec_for_scripts $ora_home/sysman/admin/scripts

    return 0
}

#
# Generate the Debian packages
#
func_builddeb() {
    for d in oracle-client-instant/debian/oracle-client-instant oracle-client-runtime/debian/oracle-client-runtime oracle-client-admin/debian/oracle-client-admin ; do
        DST_DIR="$BUILD_DIR"/$d
        [ ! -d "$DST_DIR" ] && continue

        orabase_info "Process files in $DST_DIR"

        DEBIAN_WORKDIR="`echo $DST_DIR | sed -e 's#\(.*\)/\([^/]\+\)$#\1#'`"

	    DEBUILD_OPTS="--no-lintian binary"

    	if [ -n "$FAKEROOT" ] ; then
	    	DEBUILD_OPTS="--rootcmd=$FAKEROOT $DEBUILD_OPTS"
    	fi

        orabase_info "Cleaning up ORACLE_HOME directory ..."
        func_clean_oracle_home "$DST_DIR/$ORA_HOME" 2>&-

        # Create Oracle inventory directory to set up permissions properly
        #
        mkdir -p "$DST_DIR$ORA_INV_LOC"

        # Set default permissions for user `oracle'
        #
        chown -R $ORACLE_USER:$ORACLE_GROUP "$DST_DIR"

        # Setting target permisions
        #
        orabase_info "Setting permisions in ORACLE_HOME directory ..."
        func_set_permissions "$DST_DIR/$ORA_HOME" 2>&-

	    cd "$DST_DIR"
        orabase_info "Building package as \`root' to copy permissions properly..."
	    $SUDO debuild ${DEBUILD_OPTS}
        # Restore owner after building package
        $SUDO chown -R $ORACLE_USER $BUILD_DIR
    done
}

# Main program =========================================================================

# Set output mode
if [ -z "$TERM" -o "$TERM" = "dumb" ]; then
   # Disable output to console
   export ORABASE_QUIET="TRUE"
fi

[ $(id --user --name ) != "oracle" ] && orabase_error_exit "Please, run this script as user \`oracle'"

if [ $# -eq 0 ] ; then
   usage
   exit 0
fi

TEMP=`getopt -o h,v,u:,r:,m:,l:,k,e:,b:,o: --long help,version,upstream-version:,maintainer:,revision:,keep-dir,email:,build-dir:,oracle-home-dir \
             -n "$EXE_NAME" -- "$@"`

[ $? != 0 ] && orabase_error_exit "Error while parse command line arguments, terminating..."

eval set -- "$TEMP"

while true ; do
    case "$1" in
        -h|--help) usage; exit 0 ;;
        -v|--version) echo "$EXE_NAME $VERSION"; exit 0 ;;
        -b|--build-dir) BUILD_DIR="$2"; shift 2 ;;
        -e|--email ) EMAIL="$2"; shift 2 ;;
        -i|--install) DO_INSTALL=yes; shift ;;
        -k|--keep-dir) KEEP_DIR=yes; shift ;;
        -l|--revision) ADD_REV="$2"; shift 2 ;;
        -m|--maintainer) MAINT="$2"; shift 2 ;;
        -r|--root-command) FAKEROOT="$2"; shift 2 ;;
        -u|--upstream-version ) UPVER="$2"; shift 2 ;;
        --) shift ; break ;;
        *) orabase_error_exit "Internal error!" ;;
    esac
done
	
if [ ${#} -lt 1 ] ; then
    orabase_error_exit "Missing command line parameter, use \"-h\" or \"--help\" for syntax, terminating..."
elif [ ${#} -gt 1 ] ; then
	orabase_error_exit "Extra command line parameter, use \"-h\" or \"--help\" for syntax, terminating..."
else
	ARCHIVE="${1}"
	[ -r "$ARCHIVE" ] || orabase_error_exit "Can't read source file $ARCHIVE, terminating..."
fi

# Do job
#
func_workdir

# Change working directory
#
cd "$BUILD_DIR"

func_extract
func_getversion
func_makeresp
func_inventory

# Install Oracle software into real target directory
#
func_orahome_make
func_install
func_orahome_clean

# Debianization
#
func_debianize
func_builddeb

# Move created packages out of temporary $BUILD_DIR
#
mv "$BUILD_DIR"/*.deb $HOME/
ls -l $HOME/*.deb

exit 0
